m√¥-ƒëun . h√†ng xu·∫•t kh·∫©u . config  =  {
    t√™n : "t·ªáp" ,
    phi√™n b·∫£n : "1.0.1" ,
    hasPermssion : 2 ,
    t√≠n d·ª•ng : "JRT" ,
    m√¥ t·∫£ : "X√≥a t·ªáp ho·∫∑c th∆∞ m·ª•c trong c√°c l·ªánh th∆∞ m·ª•c" ,
    commandCategory : "Qu·∫£n tr·ªã vi√™n" ,
    usages : "\ ncommands start <text> \ ncommands ext <text> \ ncommands <text> \ ncommands [ƒë·ªÉ tr·ªëng] \ ncommands help \ nL∆ØU √ù: <text> is your character fill in the option" ,
    th·ªùi gian h·ªìi chi√™u : 5
} ;

m√¥-ƒëun . h√†ng xu·∫•t kh·∫©u . handleReply  =  ( { api , event , args , handleReply } )  =>  {
    if ( event . senderID  ! =  handleReply . author )  return ; 
    const  fs  =  request ( "fs-extra" ) ;
  var  arrnum  =  s·ª± ki·ªán . c∆° th·ªÉ . chia ( "" ) ;
  var  msg  =  "" ;
  var  nums  =  arrnum . map ( n  =>  parseInt ( n ) ) ;

  for ( let  num  of  nums )  {
    var  target  =  handleReply . c√°c t·ªáp [ num - 1 ] ;
    var  fileOrdir  =  fs . statSync ( __dirname + '/' + target ) ;
        if ( fileOrdir . isDirectory ( )  ==  true )  {
          var  typef  =  "[Th∆∞ m·ª•cüóÇÔ∏è]" ;
          fs . rmdirSync ( __dirname + '/' + target ,  { recursive : true } ) ;
        }
        else  if ( fileOrdir . isFile ( )  ==  true )  {
          var  typef  =  "[T·∫≠p tinüìÑ]" ;
          fs . unlinkSync ( __dirname + "/" + target ) ;
        }
        msg  + =  typef + '' + handleReply . t·ªáp [ num - 1 ] + "\ n" ;
  }
  api . sendMessage ( "‚ö°Ô∏èƒê√£ x√≥a c√°c t·∫≠p tin sau c√°c l·ªánh th∆∞ m·ª•c: \ n \ n" + msg ,  event . threadID ,  event . messageID ) ;
}


m√¥-ƒëun . h√†ng xu·∫•t kh·∫©u . run  =  async  function ( { api , event , args , Threads } )  {
  
  const  fs  =  request ( "fs-extra" ) ;
  var  t·ªáp  =  fs . readdirSync ( __dirname + "/" )  ||  [ ] ;
  var  msg  =  "" ,  i  =  1 ;
  
//

  if ( args [ 0 ]  ==  'help' )  {
    var  msg  =  `
Command use:
‚Ä¢ Ph√≠m: start <text>
‚Ä¢ T√°c d·ª•ng: L·ªçc ra t·ªáp c·∫ßn x√≥a c√≥ t√πy ch·ªçn b·∫Øt ƒë·∫ßu k√Ω t·ª±
‚Ä¢ V√≠ d·ª•: x·∫øp h·∫°ng l·ªánh
‚Ä¢ Kh√≥a: ext <text>
‚Ä¢ T√°c d·ª•ng: Filter ra file c·∫ßn x√≥a c√≥ t√πy ch·ªçn ƒëu√¥i
‚Ä¢ T√°c d·ª•ng: filter the files in name with text option
‚Ä¢ V√≠ d·ª•: c√°c l·ªánh a
‚Ä¢ Key: to blank
‚Ä¢ T√°c d·ª•ng: filter ra all files in cache
‚Ä¢ V√≠ d·ª•: l·ªánh
‚Ä¢ Ch√¨a kh√≥a: tr·ª£ gi√∫p
‚Ä¢ T√°c d·ª•ng: xem c√°ch s·ª≠ d·ª•ng l·ªánh
‚Ä¢ V√≠ d·ª•: l·ªánh help` ;
    
    tr·∫£ l·∫°i  api . sendMessage ( msg ,  event . threadID ,  event . messageID ) ;
  }
  else  if ( args [ 0 ]  ==  "start"  &&  args [ 1 ] )  {
    var  word  =  args . l√°t ( 1 ) . tham gia ( "" ) ;
    var  files  =  c√°c t·∫≠p tin . filter ( file  =>  file . startWith ( word ) ) ;
    
    if ( files . length  ==  0 )  tr·∫£ v·ªÅ  api . sendMessage ( `‚ö°Ô∏èKh√¥ng c√≥ t·ªáp n√†o trong b·ªô ƒë·ªám c√≥ k√Ω t·ª± b·∫Øt ƒë·∫ßu b·∫±ng: $ { word } ` ,  event . threadID  , event .  messageID ) ;
    var  key  =  `‚ö°Ô∏èC√≥ $ { t·ªáp . length } t·ªáp c√≥ ƒë·∫ßu k√Ω t·ª± l√†: $ { word } ` ;
  }
  
  // t·∫≠p tin ƒëu√¥i l√† .....
  else  if ( args [ 0 ]  ==  "ext"  &&  args [ 1 ] )  {
    var  ext  =  args [ 1 ] ;
    var  files  =  c√°c t·∫≠p tin . filter ( file  =>  file . endWith ( ext ) ) ;
    
    if ( files . length  ==  0 )  tr·∫£ v·ªÅ  api . sendMessage ( `‚ö°Ô∏èKh√¥ng c√≥ t·ªáp n√†o trong c√°c l·ªánh c√≥ k√Ω t·ª± k·∫øt th√∫c b·∫±ng: $ { ext } ` ,  event . threadID  , event .  messageID ) ;
    var  key  =  `‚ö°Ô∏èC√≥ $ { t·ªáp . length } file c√≥ ƒëu√¥i l√†: $ { ext } ` ;
  }
  //T·∫•t c·∫£ c√°c t·∫≠p tin
  kh√°c  n·∫øu  ( ! args [ 0 ] )  {
  if ( files . length  ==  0 )  tr·∫£ v·ªÅ  api . sendMessage ( "Ô∏èCommands c·ªßa b·∫°n kh√¥ng c√≥ t·ªáp ho·∫∑c th∆∞ m·ª•c n√†o" ,  event . threadID  , event .  messageID ) ;
  var  key  =  "‚ö°Ô∏èT·∫•t c·∫£ c√°c t·ªáp trong c√°c l·ªánh th∆∞ m·ª•c:" ;
  }
  // in name with character .....
  kh√°c  {
    var  word  =  args . l√°t ( 0 ) . tham gia ( "" ) ;
    var  files  =  c√°c t·∫≠p tin . filter ( file  =>  file . bao g·ªìm ( word ) ) ;
    if ( files . length  ==  0 )  tr·∫£ v·ªÅ  api . sendMessage ( `‚ö°Ô∏èKh√¥ng c√≥ t·ªáp n√†o trong t√™n c√≥ k√Ω t·ª±: $ { word } ` ,  event . threadID  , event .  messageID ) ;
    var  key  =  `‚ö°Ô∏èC√≥ $ { t·ªáp . length } file in name with character: $ { word } ` ;
  }
  
    c√°c t·∫≠p tin . forEach ( t·ªáp  =>  {
        var  fileOrdir  =  fs . statSync ( __dirname + '/' + t·ªáp ) ;
        if ( fileOrdir . isDirectory ( )  ==  true )  var  typef  =  "[Th∆∞ m·ª•cüóÇÔ∏è]" ;
        if ( fileOrdir . isFile ( )  ==  true )  var  typef  =  "[FileüìÑ]" ;
        msg  + =  ( i ++ ) + '. ' + typef + ' ' + t·ªáp + ' \ n ' ;
    } ) ;
    
     api . sendMessage ( `‚ö°Ô∏èReply message b·∫±ng s·ªë ƒë·ªÉ x√≥a t·ªáp t∆∞∆°ng ·ª©ng, c√≥ th·ªÉ rep nhi·ªÅu s·ªë, c√°ch nhau b·∫±ng d·∫•u c√°ch. \ n $ { key } \ n \ n` + msg ,  event . threadID ,  ( e ,  info )  =>  global . client . handleReply . push ( {
    t√™n : c√°i n√†y . c·∫•u h√¨nh . t√™n ,
    messageID : th√¥ng tin . messageID ,
    t√°c gi·∫£ : s·ª± ki·ªán . senderID ,
    c√°c t·∫≠p tin
  } ) )
 
}
