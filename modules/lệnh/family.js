m√¥-ƒëun . h√†ng xu·∫•t kh·∫©u . config  =  {
    t√™n : "gia ƒë√¨nh" ,
    phi√™n b·∫£n : "1.0.1" ,
    hasPermssion : 0 ,
    t√≠n d·ª•ng : "NTKhang" ,
    description : "T·∫°o ·∫£nh t·∫•t c·∫£ th√†nh vi√™n trong h·ªôp" ,
    commandCategory : "create image all TV" ,
    usages : "family <size> [# color code] or family <size> \ nH√¨nh ƒë·∫°i di·ªán k√≠ch th∆∞·ªõc nh·ªè th√†nh vi√™n th√≠ch h·ª£p v√† m√†u m√£ cho ch·ªØ (m·∫∑c ƒë·ªãnh l√† ƒëen) theo c√∫ ph√°p: \ n $ family <size> <color code > <title> \ nTrong ƒë√≥: \ n ‚Ä¢ size: K√≠ch th∆∞·ªõc m·ªói ·∫£nh ƒë·∫°i di·ªán th√†nh vi√™n \ n ‚Ä¢ m√†u m√£: hex d·∫°ng m√£ m√†u \ n ‚Ä¢ title: ·∫£nh ti√™u ƒë·ªÅ, m·∫∑c ƒë·ªãnh l√† h·ªôp t√™n \ nV√≠ d·ª•: $ family 200 # ffffff Anh em m·ªôt nh√† \ nN·∫øu size = 0 th√¨ s·∫Ω t·ª± ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc, n·∫øu kh√¥ng ƒëi·ªÅn ti√™u ƒë·ªÅ th√¨ title s·∫Ω l√† h·ªôp t√™n " ,
    th·ªùi gian h·ªìi chi√™u : 5 ,
    ph·ª• thu·ªôc : {
      "fs-extra" : "" , 
      "axios" : "" , 
      "canvas" : "" , 
      "jimp" : "" , 
      "node-superfetch" : "" ,
      "ph·∫•n" : ""
    }
} ;


m√¥-ƒëun . h√†ng xu·∫•t kh·∫©u . run  =  async  ( { event , api , args } )  =>  {
  var  TOKEN  =  "6628568379% 7Cc1e620fa708a1d5696fb991c1bde5662" ;
  th·ª≠  {
    if ( global . client . family  ==  true )  tr·∫£ v·ªÅ  api . sendMessage ( "H·ªá th·ªëng ƒëang x·ª≠ l√Ω y√™u c·∫ßu t·ª´ h·ªôp kh√°c, vui l√≤ng quay l·∫°i sau" ,  event . threadID ,  event . messageID ) ;
    to√†n c·∫ßu . kh√°ch h√†ng . gia ƒë√¨nh  =  true ;
	  var  timestart  =  Ng√†y . ngay ( ) ;
	  const  fs  =  to√†n c·ª•c . n·ªët s·∫ßn [ "fs-extra" ] ;
	  const  axios  =  global . n·ªët s·∫ßn [ " axios " ] ;
	  const  { threadID , messageID }  =  s·ª± ki·ªán ;
	  const  request  =  global . n·ªët s·∫ßn [ "y√™u c·∫ßu" ] ;
	  const  superfetch = to√†n c·∫ßu . n·ªët s·∫ßn [ "node-superfetch" ] ;
	  if ( ! fs . bringSync ( __dirname + '/cache/fontfamily.ttf' ) )  {
	    let  getfont  =  ( await  axios . get ( `https: //drive.google.com/u/0/uc? id = 1HOnwKqsW_1CamOnFsmrRW1wvefFF5YpF & export = download` ,  {  responseType : " arraybuffer "  } ) ) . d·ªØ li·ªáu ;
       fs . writeFileSync ( __dirname + "/cache/fontfamily.ttf" ,  B·ªô ƒë·ªám . from ( getfont ,  "utf-8" ) ) ;
	  } ;
	  
	  if ( ! args [ 0 ]  ||  isNaN ( args [ 0 ] )  ==  true  ||  args [ 0 ]  ==  "help" )  {
	    if ( ! fs .. beingSync ( __dirname + "/cache/hexcolor.png" ) )  {
	     let  getimg  =  ( await  axios . get ( `https: // www.htlvietnam.com / images / bai-viet / code-mau / bang-ma-mau-02.jpg` ,  {  responseType : " arraybuffer "  } ) ) . d·ªØ li·ªáu ;
       fs . writeFileSync ( __dirname + "/cache/hexcolor.png" ,  B·ªô ƒë·ªám . from ( getimg ,  "utf-8" ) ) ;
	    }
	    to√†n c·∫ßu . kh√°ch h√†ng . gia ƒë√¨nh  =  gi·∫£ d·ªëi ;
		tr·∫£ l·∫°i  api . sendMessage ( { body : "Nh·∫≠p k√≠ch th∆∞·ªõc avatar th√†nh vi√™n th√≠ch h·ª£p v√† m√£ m√†u cho ch·ªØ (m·∫∑c ƒë·ªãnh l√† ƒëen) theo c√∫ ph√°p: \ n $ family <size> <m√†u m√£> <title> \ nTrong ƒë√≥: \ n ‚Ä¢ size : K√≠ch th∆∞·ªõc m·ªói ·∫£nh ƒë·∫°i di·ªán th√†nh vi√™n \ n ‚Ä¢ m√†u m√£: hex d·∫°ng m√†u m√£ \ n ‚Ä¢ title: ·∫£nh ti√™u ƒë·ªÅ, m·∫∑c ƒë·ªãnh l√† h·ªôp t√™n n·∫øu kh√¥ng ƒëi·ªÅn \ nV√≠ d·ª•: $ family 200 #ffffff Anh em m·ªôt nh√† \ nK√≠ch th∆∞·ªõc l·ª±a ch·ªçn = 0 th√¨ s·∫Ω t·ª± ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc, n·∫øu ti√™u ƒë·ªÅ kh√¥ng ƒëi·ªÅn th√¨ ti√™u ƒë·ªÅ s·∫Ω l√† h·ªôp t√™n " ,
		t·∫≠p tin ƒë√≠nh k√®m : fs . createReadStream ( __dirname + "/cache/hexcolor.png" ) } ,  threadID ,  messageID ) ;
	  } ;
    
    
    const  jimp  =  to√†n c·∫ßu . n·ªët s·∫ßn [ " jimp " ] ;
    const  ph·∫•n  =  to√†n c·∫ßu . n·ªët s·∫ßn [ "ph·∫•n" ] ;
    const  Canvas  =  to√†n c·∫ßu . n·ªët s·∫ßn [ "canvas" ] ;
  

    var  threadInfo  =  ch·ªù  api . getThreadInfo ( threadID ) ;
    var  arrob  =  threadInfo . adminIDs ;
    var  arrayd  =  [ ] ;
    cho ( h√£y ƒë·ªÉ  qtv  c·ªßa  arrob )  {
      s·∫Øp x·∫øp . push ( qtv . id )
    } ;
    const  background  =  await  Canvas . loadImage ( "https://i.ibb.co/xqrFW4N/Pics-Art-06-26-12-07-26.jpg" ) ;
    
    var  idtv  =  threadInfo . ID ng∆∞·ªùi tham gia ;
  
    var  xbground  =  background . chi·ªÅu r·ªông ,
        ybground  =  n·ªÅn . chi·ªÅu cao ;


    var  dem  =  1 ;
    var  tds  =  200 ,
        s  =  parseInt ( args [ 0 ] ) ; //k√≠ch th∆∞·ªõc
        //KICH TH∆Ø∆†C T∆ØÃ£ ƒê√îÃ£NG
    var  mode  =  "" ;
    if ( s  ==  0 )  {
      var  dtich  =  xbground * ( ybground - tds ) ;
      var  dtichtv  =  To√°n h·ªçc . t·∫ßng ( dtich / idtv . length ) ;
      var  s  =  To√°n h·ªçc . s√†n ( Math . sqrt ( dtichtv ) ) ;
      mode  + =  "(K√≠ch th∆∞·ªõc t·ª± ƒë·ªông)"
    } ;
        // ===============================
    var  l  =      parseInt ( s / 15 ) , // d√≤ng
        x  =      parseInt ( l ) , //
        y  =      parseInt ( tds ) , //
        xcrop  =  parseInt ( idtv . length * s ) ,
        ycrop  =  parseInt ( tds + s ) ;
        b√†n ƒëi·ªÅu khi·ªÉn . ( c√°c ) nh·∫≠t k√Ω ;
    s  =  s - l * 2 ;
    // ===============================
    
    var  color  =  args [ 1 ] ;
    if ( ! color  ||  ! color . include ( "#" ) )  {
      m√†u  =  "# 000000" ;
      autocolor  =  true ;
    } ;
        if ( s  >  ybground  ||  s  >  xbground )  {
          to√†n c·∫ßu . kh√°ch h√†ng . gia ƒë√¨nh  =  gi·∫£ d·ªëi ;
          tr·∫£ l·∫°i  api . sendMessage ( `K√≠ch th∆∞·ªõc avatar ph·∫£i nh·ªè h∆°n k√≠ch th∆∞·ªõc background \ nK√≠ch th∆∞·ªõc background: X: $ { xbground } , Y: $ { ybground } ` ,  threadID ,  messageID ) ;
        }
        api . sendMessage ( `üî¢S·ªë ·∫£nh d·ª± t√≠nh: $ { idtv . length } \ nüÜíK√≠ch th∆∞·ªõc n·ªÅn: $ { xbground } x $ { ybground } \ nüÜïK√≠ch th∆∞·ªõc m·ªói ·∫£nh ƒë·∫°i di·ªán: $ { s } $ { mode } \ n # Ô∏è‚É£M√†u: $ { color } \ n‚è≥ƒêang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n, qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t ƒë·∫øn 5p ƒë·ªÉ ho√†n th√†nh ... ' , threadID ,  messageID ) ;
    var  loadkhung  =  await  Canvas . loadImage ( "https://i.ibb.co/H41cdDM/1624768781720.png" ) ; //("https://s1.uphinh.org/2021/06/24/1624551553171.png ");
    var  title  =  args . l√°t ( 2 ) . tham gia ( "" )  ||  threadInfo . t√™n g·ªçi ;
    var  path_alltv  =  __dirname + `/ cache / alltv $ { threadID } $ { Ng√†y . ngay ( ) } .png` ;
     ƒë·ªô tr·ªÖ ch·ª©c nƒÉng ( mili gi√¢y )  {
       tr·∫£ v·ªÅ  l·ªùi h·ª©a m·ªõi  ( gi·∫£i quy·∫øt => setTimeout ( gi·∫£i quy·∫øt , ms ) ) ;   
    } ;
    const  canvas  =  Canvas . createCanvas ( xbground ,  ybground ) ;
    h√£y ƒë·ªÉ  ctx  =  canvas . getContext ( '2d' ) ;
    ctx . drawImage ( background ,  0 ,  0 ,  canvas . width ,  canvas . height ) ;

    var  ngdung  =  0 ; // count acc die
    // ====== ƒê·ªÇ LOOP DRAW AVATAR ===== //
    
    for ( let  id  c·ªßa  idtv )  {
      b√†n ƒëi·ªÅu khi·ªÉn . log ( dem ,  ph·∫•n . green ( "FAMILY:" ) + "ƒëang v·∫Ω avt c·ªßa id" + id ) ;
        th·ª≠  {
        	var  avatar  =  await  superfetch . get ( `https://graph.facebook.com/ $ { id } / picture? width = 512 & height = 512 & access_token = $ { TOKEN } ` ) ;
        	if ( avatar . url . include ( ".gif" ) )  { n√©m  L·ªói } ;
        }
        b·∫Øt ( e )  {
            ngdung  + =  1 ;
            ti·∫øp t·ª•c ; 
        } ;

        if ( x + s  >  xbground )  {
          xcrop  =  x ;
        	x  + =  ( - x ) + l ;
        	y  + =  s + l ;
        	ycrop  + =  s + l ;
        } ;
        
        if ( ycrop  >  ybground )  {
          ycrop  + =  ( - s ) ;
          ph√° v·ª° ;
        } ; 
      
        avatar  =  ·∫£nh ƒë·∫°i di·ªán . c∆° th·ªÉ ;
        const  img  =  Canvas m·ªõi  . H√¨nh ·∫£nh ( ) ;
        var  avatarload  =  await  Canvas . loadImage ( ·∫£nh ƒë·∫°i di·ªán ) ;
        img . src  =  avatarload ;

        ctx . drawImage ( avatarload ,  x ,  y ,  s ,  s ) ;

        if ( arrayd . include ( id ) )  {
        ctx . drawImage ( loadkhung ,  x ,  y ,  s ,  s ) ;
        } ;
        b√†n ƒëi·ªÅu khi·ªÉn . log ( ph·∫•n . xanh ( "Gia ƒë√¨nh:" ) + "ƒê√£ v·∫Ω avt c·ªßa id" + id ) ;
        dem ++ ;
        img . onerror  =  err  =>  {  n√©m  err  } ;
        x  + =  parseInt ( s + l ) ;
    } ;
   V·∫£i b·∫°t . registerFont ( __dirname + "/cache/fontfamily.ttf" ,  {
        gia ƒë√¨nh : "Manrope"
    } ) ;
    ctx . font  =  "100px Manrope" ;
    ctx . fillStyle  =  m√†u s·∫Øc ;
    ctx . textAlign  =  "trung t√¢m" ;
    ctx . fillText ( ti√™u ƒë·ªÅ ,  xcrop / 2 ,  133 ) ;
    //ctx.beginPath ();
    b√†n ƒëi·ªÅu khi·ªÉn . log ( ph·∫•n . m√†u v√†ng ( "Chuy·ªÉn sang b·ªô ƒë·ªám ..." ) ) ;
    // const imageBuffer = canvas.toBuffer ();

    b√†n ƒëi·ªÅu khi·ªÉn . log ( ph·∫•n . xanh lam ( `Sucess X: $ { xcrop } , Y: $ { ycrop } ` ) ) ;
    try { // ktra auto c·∫Øt ·∫£nh c√≥ b·ªã l·ªói hay ko
      const  imageecut  =  await  jimp . read ( canvas . toBuffer ( ) ) ;
      b√†n ƒëi·ªÅu khi·ªÉn . log ( "ƒê√£ ƒë·ªçc h√¨nh ·∫£nh" ,  xcrop ,  ycrop ) ;
      // =========== C·∫ÆT H√åNH =========== //
      t∆∞·ªüng t∆∞·ª£ng . c·∫Øt ( 0 ,  0 ,  xcrop ,  ycrop + l - 30 ) . writeAsync ( path_alltv ) ;
      b√†n ƒëi·ªÅu khi·ªÉn . log ( "ƒê√£ c·∫Øt xong ·∫£nh v√† l∆∞u v√†o b·ªô nh·ªõ cache" ) ;
      ch·ªù ƒë·ª£i  s·ª± ch·∫≠m tr·ªÖ ( 200 ) ;
       api . sendMessage ( { body : `üü¶S·ªë ·∫£nh: $ { dem } (ƒê√£ l·ªçc $ { ngdung } Ng∆∞·ªùi d√πng facebook) \ nüÜíK√≠ch th∆∞·ªõc n·ªÅn: $ { xbground } x $ { ybground } \ nüÜïK√≠ch th∆∞·ªõc m·ªói ·∫£nh ƒë·∫°i di·ªán: $ { s } $ { mode } \ n‚è±Ô∏èTh·ªùi gian x·ª≠ l√Ω: $ { Math . floor ( ( Date . now ( ) - timestart ) / 1000 ) }s` ,
          t·∫≠p tin ƒë√≠nh k√®m : fs . createReadStream ( path_alltv ,  {  'highWaterMark' : 128  *  1024  } )
       } ,  threadID ,  ( e ,  info )  =>  {
         n·∫øu ( e )  {
            api . sendMessage ( "C√≥ l·ªói, vui l√≤ng th·ª≠ l·∫°i sau" ,  threadID ,  messageID ) ;
         } ;
         fs . unlinkSync ( path_alltv ) ;
       } ,  messageID ) ;
       to√†n c·∫ßu . kh√°ch h√†ng . family  =  false
    }
    b·∫Øt ( e )  {
      b√†n ƒëi·ªÅu khi·ªÉn . log ( e . ngƒÉn x·∫øp ) ;
      fs . writeFileSync ( path_alltv ,  canvas . toBuffer ( ) ) ;
       api . sendMessage ( {
        body : `L·ªói t·ª± ƒë·ªông c·∫Øt \ nüü¶S·ªë ·∫£nh: $ { dem } \ n (ƒê√£ l·ªçc $ { ngdung } Ng∆∞·ªùi d√πng facebook) \ nüÜíK√≠ch th∆∞·ªõc n·ªÅn: $ { xbground } x $ { ybground } \ nüÜï K√≠ch th∆∞·ªõc m·ªói h√¨nh ƒë·∫°i di·ªán: $ { s } $ { mode } \ n‚è±Ô∏èTh·ªùi gian x·ª≠ l√Ω: $ { Math . t·∫ßng ( ( Date . now ( ) - timestart ) / 1000 ) } seconds` ,
            t·∫≠p tin ƒë√≠nh k√®m : fs . createReadStream ( path_alltv ,  {  'highWaterMark' : 128  *  1024  } )
         } ,  threadID ,  ( e ,  info )  =>  {
           n·∫øu ( e )  {
              api . sendMessage ( "C√≥ l·ªói, vui l√≤ng th·ª≠ l·∫°i sau" ,  threadID ,  messageID ) ;
           } ;
           fs . unlinkSync ( path_alltv ) ;
         } ,  messageID ) ;
         to√†n c·∫ßu . kh√°ch h√†ng . gia ƒë√¨nh  =  gi·∫£ d·ªëi ;
    }
  }
  catch ( e )  { to√†n c·∫ßu . kh√°ch h√†ng . gia  =  false } ;
}
Ch√¢n trang
¬© 2022 GitHub, Inc.
ƒêi·ªÅu h∆∞·ªõng ch√¢n trang
ƒêi·ªÅu ki·ªán
S·ª± ri√™ng t∆∞
B·∫£o v·ªá
Tr·∫°ng th√°i
Docs
Li√™n h·ªá v·ªõi GitHub
ƒê·ªãnh gi√°
API
T·∫≠p hu·∫•n
Blog
V·ªÅ
